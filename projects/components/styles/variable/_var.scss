@use 'sass:map';
@use 'sass:math';
@use "../mixins/fn" as *;

$types: primary, success, warning, danger, error, info;

$colors: (
  ) !default;
$colors: map.deep-merge(('white': #ffffff,
      'black': #000000,
      'primary': ('base': #2B5AED,
      ),
      'success': ('base': #1FB4A2,
      ),
      'warning': ('base': #FFAA1A,
      ),
      'danger': ('base': #FA5247,
      ),
      'error': ('base': #FA5247,
      ),
      'info': ('base': rgba(30, 32, 37),
      ),
    ),
    $colors
);

$color-white: map.get($colors, 'white') !default;
$color-black: map.get($colors, 'black') !default;
$color-primary: map.get($colors, 'primary', 'base') !default;
$color-success: map.get($colors, 'success', 'base') !default;
$color-warning: map.get($colors, 'warning', 'base') !default;
$color-danger: map.get($colors, 'danger', 'base') !default;
$color-error: map.get($colors, 'error', 'base') !default;
$color-info: map.get($colors, 'info', 'base') !default;

$font-weight-primary: 400 !default;

@mixin set-color-mix-level($type,
  $number,
  $mode: 'light',
  $mix-color: $color-white) {
  $colors: map.deep-merge(($type: ('#{$mode}-#{$number}': mix($mix-color,
          map.get($colors, $type, 'base'),
          math.percentage(math.div($number, 10))),
      ),
    ),
    $colors ) !global;
}

@each $type in $types {
  @for $i from 1 through 9 {
    @include set-color-mix-level($type, $i, 'light', $color-white);
  }
}


@each $type in $types {
  @include set-color-mix-level($type, 2, 'dark', $color-black);
}

$font-family: (
  ) !default;
$font-family: map.merge(('': "'PingFang SC', 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', Arial, sans-serif",
      'code': "'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace"
    ),
    $font-family
);

$font-size: (
  ) !default;
$font-size: map.merge(('title-l': 32px,
      'title-m': 24px,
      'title-s': 28px,
      'text-l': 16px,
      'text-m': 14px,
      'text-s': 12px,
    ),
    $font-size
);

$space-size: (
  ) !default;
$space-size: map.merge((
      'xl': 24px,
      'l': 16px,
      'm': 12px,
      's': 8px,
      'ss': 4px,
    ),
    $space-size
);

$radius-size: (
  ) !default;
$radius-size: map.merge((
      'xl': 16px,
      'l': 12px,
      'm': 8px,
      's': 4px,
      'ss': 2px,
    ),
    $radius-size
);

$link: () !default;
$link: map.merge(('link-color': getCssVar('color', 'primary'),
      'link-hover-color': getCssVar('color-primary', 'light-3'),
      'link-active-color': getCssVar('color-primary', 'dark-2'),
    ),
    $link
);

$link-css-var: () !default;
$link-css-var: map.merge(('link-decoration': none,
      'link-hover-decoration': none,
      'link-focus-decoration': none,
      'link-focus-outline': 0,
    ),
    $link-css-var
);


$line-height: (
  ) !default;
$line-height: map.merge(('title-l': 46px,
      'title-m': 36px,
      'title-s': 26px,
      'text-l': 24px,
      'text-m': 22px,
      'text-s': 18px,
    ),
    $line-height
);

$z-index: (
  ) !default;
$z-index: map.merge(('normal': 1,
      'popover': 1000,
      'dialog': 2000,
    ),
    $z-index
);

$border-radius-base: 4px;

$border-radius: (
  ) !default;
$border-radius: map.merge(('base': $border-radius-base,
      'radius-m': 8px,
      'radius-l': 12px,
      'radius-xl': 16px,
      'circle': 100%,
    ),
    $border-radius
);

$bg-color: (
  ) !default;
$bg-color: map.merge(('': #ffffff,
      'page': #f2f3f5,
      'popover': #ffffff,
    ),
    $bg-color 
);

$text-color: (
  ) !default;
$text-color: map.merge(('primary': #303133,
      'regular': #606266,
      'secondary': #909399,
      'placeholder': #a8abb2,
      'disabled': #c0c4cc,
    ),
    $text-color
);

$border-color: (
  ) !default;
$border-color: map.merge(('': #dcdfe6,
      'light': #e4e7ed,
      'lighter': #ebeef5,
      'extra-light': #f2f6fc,
      'dark': #d4d7de,
      'darker': #cdd0d6,
    ),
    $border-color
);

$button-component: () !default;
$button-component: map.merge(
    (
        'font-weight': getCssVar('font-weight-primary'),
        'border-color': getCssVar('border-color'),
        'bg-color': getCssVar('fill-color', 'blank'),
        'text-color': getCssVar('text-color', 'regular'),
        'disabled-text-color': getCssVar('disabled-text-color'),
        'disabled-bg-color': getCssVar('fill-color', 'blank'),
        'disabled-border-color': getCssVar('border-color-light'),
        'divide-border-color': rgba($color-white, 0.5),
        'hover-text-color': getCssVar('color-primary'),
        'hover-bg-color': getCssVar('color-primary', 'light-9'),
        'hover-border-color': getCssVar('color-primary-light-7'),
        'active-text-color': getCssVar('button-hover-text-color'),
        'active-border-color': getCssVar('color-primary'),
        'active-bg-color': getCssVar('button', 'hover-bg-color'),
        'outline-color': getCssVar('color-primary', 'light-5'),
        'hover-link-text-color': getCssVar('color-info'),
        'active-color': getCssVar('text-color', 'primary'),
    ),
    $button-component
);